// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  Int @id @default(autoincrement())
  phoneNumber String @unique
  password String
  name String?
  email String? @unique
  balance Balance[]
  onRampTransaction OnRampTransaction[]
  sentTransfers P2pTransfer[] @relation(name: "FromUserRelation")
  receivedTransfers P2pTransfer[] @relation(name: "ToUserRelation")
}

model Balance {
  id Int @id @default(autoincrement())
  amount Int
  locked Int
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
}

model OnRampTransaction {
  id Int @id @default(autoincrement())
  token String @unique
  status OnRampStatus
  amount Int
  startTime DateTime
  bankProviderId Int
  BankProvider BankProvider @relation(fields: [bankProviderId], references: [id])
  userId Int
  user User @relation(fields: [userId], references: [id])
}

model BankProvider {
  id Int @id @default(autoincrement())
  name String
  secret String @unique
  paymentUrl String @unique
  onRampTransaction OnRampTransaction[]
}

model P2pTransfer {
  id Int @id @default(autoincrement())
  amount Int
  timestamp DateTime
  fromUserId Int
  fromUser User @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId Int
  toUser User @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

enum OnRampStatus {
  Success
  Failed
  Processing
}
